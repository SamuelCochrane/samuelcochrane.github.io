I"<p>One common task Iâ€™ve seen as part of an analysts responsibilities is to send out a daily status email about the sales numbers, fiscal projections, etc.</p>

<p>Many execs find these emails useful as a quick way to stay up to date on the financial numbers of a company.
That said, sending an email on a daily cadence is a task primed for automation, letâ€™s see how to do it.</p>

<p>We can break this task down into a few component parts.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>â–¡ open an excel report
â–¡ refresh the numbers in the excel Report
â–¡ take screenshots of the relevant numbers
â–¡ create a new email from a template (maybe by opening &amp; editing yesterday's report)
â–¡ populate the email with relevant contextual information
  â–¡ today's date
  â–¡ specific numbers from the report
</code></pre></div></div>

<p>As weâ€™re interfacing with two Office products (Excel and Outlook), VBA would be a good language to use to script these interactions.
That said, VBA has some limitations. It has to live as an extension to one of the products instead of a standalone file, it canâ€™t be set to automatically run on a cadence, and overall itâ€™s just a very limited language.</p>

<p>Therefore, Iâ€™ve decided to leverage Python to tackle this task by using a library called win32com that letâ€™s us write VBA-esque code in Python. This gives us the best of both worlds.</p>

<h2 id="opening--refreshing-excel">Opening &amp; Refreshing Excel</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import win32com.client as win32
xl = win32.Dispatch("Excel.Application") #Reference to excel application
wb = xl.ActiveWorkbook #Reference to excel file
</code></pre></div></div>
<p>This code gives us a direct reference to whichever excel file we have open.<sup id="fnref:reference" role="doc-noteref"><a href="#fn:reference" class="footnote" rel="footnote">1</a></sup></p>

<p>If we donâ€™t even want to be bothered opening the report manually, we can set <code class="language-plaintext highlighter-rouge">wb</code> to a specific file by using <code class="language-plaintext highlighter-rouge">wb = xl.workbooks.open(&lt;path_to_excel_workbook&gt;)</code>.
So, <code class="language-plaintext highlighter-rouge">wb = xl.workbooks.open("C:/Users/samco/Desktop/Book1.xlsx")</code> will automatically open our workbook for us. Neat!</p>

<p>Now, we can directly mess with things in Excel via code. Try it out!</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xl.Columns.ColumnWidth = 20             
#set every column to width 20

xl.Cells(3, 2).Value                     
#grab the value of cell A2 (row 3 column 2) in the current sheet

xl.Cells(5,3).Interior.ColorIndex = 8   
#set the color of cell C5 (row 5 column 3) to cyan.
</code></pre></div></div>

<figure class="third">
<img src="/assets/images/Annotation 2019-08-29 161840.png" />
<img src="../../../assets/images/Annotation 2019-08-29 162113.png" />
<img src="../../../assets/images/Annotation 2019-08-29 162149.png" />
<figcaption>Scripting in action</figcaption>
</figure>

<p>To make sure we have the most up to date numbers locally, weâ€™ll want to refresh our pivot table. Sure we could just hit the <em>Refresh All</em> button ourselves, but clicking buttons is <em>so</em> last year. We can use <code class="language-plaintext highlighter-rouge">wb.RefreshAll()</code> to do it for us.</p>

<h2 id="saving-pictures">Saving pictures</h2>

<p>Now we need to get pictures of the updated data for our email.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xl.Range("A1:H5").Copy()                             
#copy range onto clipboard as a picture

ImageGrab.grabclipboard().save('paste1.png', 'PNG')  
 #save that picture in the current working directory
</code></pre></div></div>

<p><img src="../../../assets/images/Annotation%202019-08-29%20164653.png" alt="Pasted Image" /></p>

<p>Nice.</p>

<h2 id="populating-the-email">Populating the email</h2>

<p>Now that we have everything we need, letâ€™s generate that email.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from datetime import datetime
outlook = win32.Dispatch('outlook.application')   #get a reference to Outlook
mail = outlook.CreateItem(0)                      #create a new mail item
mail.To = 'executives@bigcompany.com'
mail.Subject = 'Finance Status Report '+datetime.today().strftime('%m/%d')  
#put today's date in subject line

</code></pre></div></div>

<p>As for the body of the report, we will pass in HTML code using <code class="language-plaintext highlighter-rouge">mail.HTMLBody =</code> with the following.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'''
&lt;p&gt;Hi Team,&lt;/p&gt;

&lt;p&gt;This email is to provide a status of the our current sales numbers&lt;/p&gt;


&lt;img src='C:\\Users\\sam\\Desktop\\EmailAuto\\paste1.png'&gt;


&lt;img src='C:\\Users\\sam\\Desktop\\EmailAuto\\paste2.png'&gt;


&lt;p&gt;Thanks and have a great day!&lt;/p&gt;
'''
</code></pre></div></div>
<figcaption>(the three ''' are there to denote a long string, which let's us pass this whole thing as one value to HTMLBody.)</figcaption>

<p>finally, we can make this mail item visible with a <code class="language-plaintext highlighter-rouge">mail.Display()</code>.
(We could also just send it with a <code class="language-plaintext highlighter-rouge">mail.Send()</code>, but Iâ€™ve found people usually prefer to give the email a once-over before sending it out).</p>

<p><img src="../../../assets/images/Annotation%202019-08-30%20094631.png" alt="Generated Email" /></p>

<p>And thatâ€™s it! With a script like this Iâ€™ve generally been able to save ~15 minutes of time per email, not to mention the reduced chances for human error. One click is now all it takes.</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:reference" role="doc-endnote">
      <p>If you have multiple excel reports open at once, wb will reference whichever report youâ€™ve interacted with most recently.Â <a href="#fnref:reference" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET